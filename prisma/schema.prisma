// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Transaction {
  id                     String          @id @default(uuid())
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  value                  String
  type                   String
  isInstallment          Boolean         @default(false)
  totalInstallmentNumber Int?
  installmentNumber      Int?
  date_transaction       DateTime
  description            String
  tags                   String[]
  user                   User            @relation(fields: [user_id], references: [id])
  user_id                String
  closing                Closing?        @relation(fields: [closing_id], references: [id])
  closing_id             String?
  fixed                  Fixed?          @relation(fields: [fixed_id], references: [id])
  fixed_id               String?
  parentTransaction      Transaction?    @relation("ParentChild", fields: [parentTransactionId], references: [id])
  parentTransactionId    String?
  childTransactions      Transaction[]   @relation("ParentChild")
  budgetCategory         BudgetCategory? @relation(fields: [budgetCategory_id], references: [id]) // Relacionamento com BudgetCategory
  budgetCategory_id      String?
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  closingDate  Int           @default(1)
  status       Boolean       @default(true)
  transactions Transaction[]
  fixed        Fixed[]
  Closing      Closing[]
  budgets      Budget[]
}

model Fixed {
  id                String         @id @default(uuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  value             Float
  type              String
  day_inclusion     Int
  description       String
  tags              String[]
  status            Boolean        @default(true)
  user              User           @relation(fields: [user_id], references: [id])
  user_id           String
  Transaction       Transaction[]
  budgetCategory    BudgetCategory @relation(fields: [budgetCategory_id], references: [id])
  budgetCategory_id String
}

model Closing {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  balance      Float
  spending     Float
  initialDate  DateTime
  finalDate    DateTime
  user         User          @relation(fields: [user_id], references: [id])
  user_id      String
  transactions Transaction[]
}

model Budget {
  id           String           @id @default(uuid())
  user         User             @relation(fields: [user_id], references: [id])
  user_id      String
  totalIncome  Float // Total de receitas planejadas
  totalExpense Float // Total de despesas planejadas
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  categories   BudgetCategory[] // Relação com categorias de receitas e despesas
}

model BudgetCategory {
  id           String        @id @default(uuid())
  budget       Budget        @relation(fields: [budget_id], references: [id])
  budget_id    String
  type         String // "income" ou "expense" para identificar se é receita ou despesa
  category     String // Nome da categoria
  amount       Float
  color        String // Cor em Hex para representar a categoria
  transactions Transaction[] // Relação inversa com Transaction
  fixed        Fixed[] // Relação inversa com Fixed

  @@unique([budget_id, category]) // Garantia de que cada categoria seja única dentro de um orçamento específico
}
